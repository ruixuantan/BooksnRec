version: "3"

x-airflow-common:
  &airflow-common
  build: ./airflow
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: SequentialExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    AIRFLOW_CONN_METADATA_DB: sqlite:////opt/airflow/airflow.db
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
  volumes:
    - ./airflow:/opt/airflow/
  user: "${AIRFLOW_UID:-50000}:0"

services:
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    environment:
      <<: *airflow-common-env
    ports:
      - ${AIRFLOW_PORT}:${AIRFLOW_PORT}

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    environment:
      <<: *airflow-common-env

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}
    user: "0:0"

  library-db:
    build: ./library-db
    container_name: library-db
    environment:
      - POSTGRES_USER=${LIBRARY_DB_USER}
      - POSTGRES_DB=${LIBRARY_DB_NAME}
      - POSTGRES_PASSWORD=${LIBRARY_DB_PASSWORD}
      - POSTGRES_PORT=${LIBRARY_DB_PORT}
    volumes:
      - ./library-db/library_data:/var/lib/postgresql/data
      - ./library-db/seed_data:/var/lib/postgresql/seed_data
    ports:
      - ${LIBRARY_DB_PORT}:${LIBRARY_DB_PORT}
    command: -p ${LIBRARY_DB_PORT}

  library:
    build: ./library
    container_name: library
    environment:
      - APP_HOST=${LIBRARY_APP_HOST}
      - APP_PORT=${LIBRARY_APP_PORT}
      - DB_HOST=${LIBRARY_DB_HOST}
      - DB_USERNAME=${LIBRARY_DB_USER}
      - DB_NAME=${LIBRARY_DB_NAME}
      - DB_PASSWORD=${LIBRARY_DB_PASSWORD}
      - DB_PORT=${LIBRARY_DB_PORT}
    ports:
      - ${LIBRARY_APP_PORT}:${LIBRARY_APP_PORT}
    command: uvicorn main:app --reload --host ${LIBRARY_APP_HOST} --port ${LIBRARY_APP_PORT}
    depends_on:
      - library-db

  minio:
    build: ./minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_RAW_BUCKET=${MINIO_RAW_BUCKET}
      - MINIO_STAGE_BUCKET=${MINIO_STAGE_BUCKET}
    volumes:
      - ./minio/data:/data
    ports:
      - ${MINIO_PORT}:${MINIO_PORT}

  clickhouse:
    build: ./clickhouse
    container_name: clickhouse
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
    ports:
      - ${CLICKHOUSE_PORT}:${CLICKHOUSE_PORT}

  superset:
    build: ./metabase
    container_name: metabase
    ports:
      - ${METABASE_PORT}:${METABASE_PORT}
    depends_on:
      - clickhouse
